#
# ps9pr1.py (Problem Set 9, Problem 1)
#
# A Connect Four Board class
#
# Computer Science 111
#
def test():
    b = Board(6, 7)
    print(b)

class Board:
    """ a data type for a Connect Four board with arbitrary dimensions
    """   
    ### add your constructor here ###
    def __init__(self, height, width):
        self.height = height
        self.width = width
        self.slots = [[' '] * self.width for row in range(self.height)]
    
    def __repr__(self):
        """ Returns a string that represents a Board object.
        """
        s = ''         #  begin with an empty string

        # add one row of slots at a time to s
        for row in range(self.height):
            s += '|'   # one vertical bar at the start of the row

            for col in range(self.width):
                s += self.slots[row][col] + '|'

            s += '\n'  # newline at the end of the row

        ### add your code here ###
        s += '---'
        current = 1
        while current < self.width:
            current += 1
            s += '--'
        s += '\n'
        
        for x in range(self.width):
            s += ' ' + str(x % 10)
            
        return s

    def add_checker(self, checker, col):
        """ adds the specified checker (either 'X' or 'O') to the
            column with the specified index col in the called Board.
            inputs: checker is either 'X' or 'O'
                    col is a valid column index
        """
        assert(checker == 'X' or checker == 'O')
        assert(col >= 0 and col < self.width)
        
        ### put the rest of the method here ###
        for r in range(self.height):
            if self.slots[self.height - 1 - r][col] == ' ':
                self.slots[self.height - 1 - r][col] = checker
                break
        
    ### add your reset method here ###
    def reset(self):
        """ reset the Board object on which it is called
        """
        self.slots = [[' '] * self.width for row in range(self.height)]
    
    def add_checkers(self, colnums):
        """ takes a string of column numbers and places alternating
            checkers in those columns of the called Board object,
            starting with 'X'.
            input: colnums is a string of valid column numbers
        """
        checker = 'X'   # start by playing 'X'

        for col_str in colnums:
            col = int(col_str)
            if 0 <= col < self.width:
                self.add_checker(checker, col)

            if checker == 'X':
                checker = 'O'
            else:
                checker = 'X'
                
    ### add your remaining methods here
    def can_add_to(self, col):
        """ returns True if it is valid to place a checker in the column
            col on the calling Board object. Otherwise, return False
        """
        if col < 0 or col >= self.width:
            return False
        for r in range(self.height):
            if self.slots[r][col] == ' ':
                return True
        return False
    
    def is_full(self):
        """ returns True if the called Board object is completely full
            of checkers, and returns False otherwise
        """
        full = 0
        for c in range(self.width):
            full = self.can_add_to(c)
            if full == True:
                break
        if full == False:
            return True
        else:
            return False
            
    def remove_checker(self, col):
        """ removes the top checker from column col of the called Board
            object. If the column is empty the method does nothing
        """
        for r in range(self.height):
            if self.slots[r][col] != ' ':
                self.slots[r][col] = ' '
                break
    def is_horizontal_win(self, checker):
        """ Checks for a horizontal win for the specified checker.
        """
        for row in range(self.height):
            for col in range(self.width - 3):
            # Check if the next four columns in this row
            # contain the specified checker.
                if self.slots[row][col] == checker and \
                    self.slots[row][col + 1] == checker and \
                    self.slots[row][col + 2] == checker and \
                    self.slots[row][col + 3] == checker:
                        return True

    # if we make it here, there were no horizontal wins
        return False
        
    def is_vertical_win(self, checker):
        """ checks for a verticle win for the specified checker
        """
        for r in range(self.height - 3):
            for c in range(self.width):
                if self.slots[self.height - 1 - r][c] == checker and \
                    self.slots[self.height - 2 - r][c] == checker and \
                    self.slots[self.height - 3 - r][c] == checker and \
                    self.slots[self.height - 4 - r][c] == checker:
                        return True
                
        return False
    
    def is_down_diagonal_win(self, checker):
        """ checks for a down diagonal win for the specified checker
        """
        for r in range(self.height - 3):
            for c in range(self.width - 3):
                if self.slots[r][c] == checker and \
                    self.slots[r - 1][c + 1] == checker and \
                    self.slots[r - 2][c + 2] == checker and \
                    self.slots[r - 3][c + 3] == checker:
                        return True
                
        return False
                
    def is_up_diagonal_win(self, checker):
        """ checks for a up diagonal win for the specified checker
        """
        for r in range(self.height - 3):
            for c in range(3, self.width):
                if self.slots[r ][c] == checker and \
                    self.slots[r + 1][c - 1] == checker and \
                    self.slots[r + 2][c - 2] == checker and \
                    self.slots[r + 3][c - 3] == checker:
                        return True
        
        return False
    
            
            
    def is_win_for(self, checker):
        """ accepts a parameter checker that is either 'X' or 'O', and 
            returns True if there are four consecutive slots containing
            checker on the board. Otherwise, return False
        """
        assert(checker == 'X' or checker == 'O')
        vertical = self.is_vertical_win(checker)
        horizontal = self.is_horizontal_win(checker)
        down_diagonal = self.is_down_diagonal_win(checker)
        up_diagonal = self.is_up_diagonal_win(checker)
        if vertical == True or horizontal == True or down_diagonal == True or up_diagonal == True:
            return True
        else:
            return False
        
